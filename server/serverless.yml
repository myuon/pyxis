service: pyxis

plugins:
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  tracing: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  environment:
    jwt_public: ${file(../token/jwtRS256.key.pub)}
    jwt_private: ${file(../token/jwtRS256.key)}
    google_clientid: ${file(../token/google.json):web.client_id}

package:
  exclude:
    - ./**
  include:
    - src/**
    - node_modules/**

functions:
  authorizer:
    handler: src/functions/auth/Auth.bs.authorize

  signIn:
    handler: src/functions/auth/Auth.bs.signIn
    events:
      - http:
          path: /auth/signIn
          method: post

  signUp:
    handler: src/functions/auth/Auth.bs.signUp
    events:
      - http:
          path: /auth/signUp
          method: post

  hello:
    handler: src/functions/echo.handler

  listRecentProjects:
    handler: src/functions/Project.bs.listRecent
    events:
      - http:
          path: /projects/recent
          method: get
          authorizer: authorizer

  getProject:
    handler: src/functions/Project.bs.get
    events:
      - http:
          path: /projects/{projectId}
          method: get
          authorizer: authorizer

  getTicket:
    handler: src/functions/Ticket.bs.get
    events:
      - http:
          path: /tickets/{ticketId}
          method: get
          authorizer: authorizer

  listPages:
    handler: src/functions/Page.bs.get
    events:
      - http:
          path: /tickets/{ticketId}/pages
          method: get
          authorizer: authorizer

  createComment:
    handler: src/functions/Comment.bs.create
    events:
      - http:
          path: /comments
          method: post
          authorizer: authorizer

  listComments:
    handler: src/functions/Comment.bs.list
    events:
      - http:
          path: /tickets/{ticketId}/comments
          method: get
          authorizer: authorizer

  getMe:
    handler: src/functions/User.bs.getMe
    events:
      - http:
          path: /users/me
          method: get
          cors: true
          authorizer: authorizer

resources:
  Resources:
    EntityTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: entities
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
          - AttributeName: owned_by
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: owners
            KeySchema:
              - AttributeName: owned_by
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
              - title
              - belongs_to
              - comment
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    UserIDTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: userId
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: user_name
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: entities
            sources: [ "./migrations/entities.json" ]
          - table: userId
            sources: [ "./migrations/users.json" ]

